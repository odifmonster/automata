lambda = _ # blank character must be called lambda

# define alphabets and state sets surrounded by curly braces, with elements separated by commas
# must define a Sigma (input) alphabet and a Gamma (stack) alphabet

Sigma = { (,),+,*,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,0,1,2,3,4,5,6,7,8,9 }
Gamma = { (,) }

NonOp = { a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,0,1,2,3,4,5,6,7,8,9 } # other sets can be defined
# any set can be referred to in transitions

# start state must be called 'start', state set 'Q', and finals set 'F'
start = 0
Q = { 0, 1, 2, 3 }
F = { 2, 3 }

# write Delta function as a set of tuples, such that Delta is a subset of Q X Sigma X Gamma* X Q X Gamma*
# tuples are defined with <>
# transitions on lambda (from stack) will be checked last, and every transition must read from the input
# every state must have at least defined behavior on every input character and lambda (from stack)

Delta = {
    <0,_,),1,_>, <0,_,*,1,_>, <0,_,+,1,_>, <0,_,(,0,)>, <0,_,NonOp,2,_>,
    <1,_,Sigma,1,_>,
    <2,),),2,_>, <2,_,),1,_>, <2,_,*,3,_>, <2,_,+,0,_>, <2,_,(,0,)>, <2,_,NonOp,2,_>,
    <3,),),2,_>, <3,_,*,1,_>, <3,_,+,0,_>, <3,_,),1,_>, <3,_,(,0,)>, <3,_,NonOp,2,_>
}